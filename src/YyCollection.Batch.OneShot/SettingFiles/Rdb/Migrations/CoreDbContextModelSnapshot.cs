// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YyCollection.Batch.OneShot.SettingFiles.Rdb;
using YyCollection.Definitions.Enums;

#nullable disable

namespace YyCollection.Batch.OneShot.SettingFiles.Rdb.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Comment");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("PostId");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Follow", b =>
                {
                    b.Property<string>("FollowerId")
                        .HasColumnType("char(26)")
                        .HasColumnName("FollowerId");

                    b.Property<string>("FolloweeId")
                        .HasColumnType("char(26)")
                        .HasColumnName("Followee");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("FollowerId", "FolloweeId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Like", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("char(26)")
                        .HasColumnName("PostId");

                    b.Property<string>("UserId")
                        .HasColumnType("char(26)")
                        .HasColumnName("UserId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("PostId", "UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.MyList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<PrivacyStatus>("PrivacyStatus")
                        .HasColumnType("privacy_status")
                        .HasColumnName("PrivacyStatus");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("MyLists");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.MyListContent", b =>
                {
                    b.Property<string>("MyListId")
                        .HasColumnType("char(26)")
                        .HasColumnName("MyLIstId");

                    b.Property<string>("PostId")
                        .HasColumnType("char(26)")
                        .HasColumnName("PostId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("MyListId", "PostId");

                    b.ToTable("MyListContents");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<string>("ContributorId")
                        .IsRequired()
                        .HasColumnType("char(26)")
                        .HasColumnName("ContributorId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<int>("EndTime")
                        .HasColumnType("integer")
                        .HasColumnName("EndTime");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("MediaUrl");

                    b.Property<string>("Overview")
                        .HasColumnType("text")
                        .HasColumnName("Overview");

                    b.Property<int>("StartTime")
                        .HasColumnType("integer")
                        .HasColumnName("StartTime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.PostCategoryRelation", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("char(26)")
                        .HasColumnName("CategoryId");

                    b.Property<string>("PostId")
                        .HasColumnType("char(26)")
                        .HasColumnName("PostId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("CategoryId", "PostId");

                    b.ToTable("PostCategoryRelations");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.PostTagRelation", b =>
                {
                    b.Property<string>("PostId")
                        .HasColumnType("char(26)")
                        .HasColumnName("PostId");

                    b.Property<string>("TagId")
                        .HasColumnType("char(26)")
                        .HasColumnName("TagId");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("PostId", "TagId");

                    b.ToTable("PostTagRelations");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("YyCollection.DataStore.Rdb.Core.Entities.Tables.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("char(26)")
                        .HasColumnName("Id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
